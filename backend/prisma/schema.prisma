// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// MASTER DATA TABLES
// ========================================

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  products    Product[]

  @@map("categories")
}

model Supplier {
  id        String    @id @default(cuid())
  name      String
  contact   String?
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  products  Product[]

  @@map("suppliers")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  sku         String    @unique
  categoryId  String
  cost        Decimal   @db.Decimal(12, 2)
  stock       Int       @default(0)
  minStock    Int       @default(0)
  baseUnit    String    // unit dasar seperti 'kg', 'sak', 'batang'
  supplierId  String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  category          Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  supplier          Supplier?           @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  units             ProductUnit[]
  transactionItems  TransactionItem[]
  stockMovements    StockMovement[]

  @@map("products")
}

model ProductUnit {
  id             String    @id @default(cuid())
  productId      String
  name           String    // nama unit seperti 'kg', '1/4 kg', 'sak'
  price          Decimal   @db.Decimal(12, 2)
  conversionRate Decimal   @db.Decimal(8, 4) // berapa unit ini = 1 base unit
  isBaseUnit     Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  product          Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  transactionItems TransactionItem[]

  @@unique([productId, name])
  @@map("product_units")
}

// ========================================
// TRANSACTION TABLES
// ========================================

model Transaction {
  id              String        @id @default(cuid())
  receiptNumber   String        @unique
  customerName    String?
  customerAddress String?
  totalAmount     Decimal       @db.Decimal(12, 2)
  paymentAmount   Decimal       @db.Decimal(12, 2)
  changeAmount    Decimal       @db.Decimal(12, 2)
  isPaid          Boolean       @default(true)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  items           TransactionItem[]
  debtRecord      DebtRecord?
  stockMovements  StockMovement[]

  @@map("transactions")
}

model TransactionItem {
  id            String      @id @default(cuid())
  transactionId String
  productId     String
  unitId        String
  quantity      Int
  unitPrice     Decimal     @db.Decimal(12, 2)
  totalPrice    Decimal     @db.Decimal(12, 2)
  createdAt     DateTime    @default(now())
  
  // Relations
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id], onDelete: Restrict)
  unit          ProductUnit @relation(fields: [unitId], references: [id], onDelete: Restrict)

  @@map("transaction_items")
}

// ========================================
// DEBT MANAGEMENT TABLES
// ========================================

enum DebtStatus {
  PENDING
  PARTIAL
  PAID
}

model DebtRecord {
  id             String      @id @default(cuid())
  transactionId  String      @unique
  customerName   String
  totalDebt      Decimal     @db.Decimal(12, 2)
  paidAmount     Decimal     @db.Decimal(12, 2) @default(0)
  remainingDebt  Decimal     @db.Decimal(12, 2)
  status         DebtStatus  @default(PENDING)
  dueDate        DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  // Relations
  transaction    Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  payments       DebtPayment[]

  @@map("debt_records")
}

model DebtPayment {
  id            String     @id @default(cuid())
  debtRecordId  String
  paymentAmount Decimal    @db.Decimal(12, 2)
  notes         String?
  createdAt     DateTime   @default(now())
  
  // Relations
  debtRecord    DebtRecord @relation(fields: [debtRecordId], references: [id], onDelete: Cascade)

  @@map("debt_payments")
}

// ========================================
// STOCK MANAGEMENT TABLES
// ========================================

enum StockMovementType {
  IN          // Stok masuk (pembelian, return, adjustment)
  OUT         // Stok keluar (penjualan, rusak, adjustment)
  ADJUSTMENT  // Penyesuaian stok manual
}

model StockMovement {
  id            String            @id @default(cuid())
  productId     String
  type          StockMovementType
  quantity      Int               // + untuk IN, - untuk OUT
  referenceId   String?           // Transaction ID, Adjustment ID, dll
  referenceType String?           // 'TRANSACTION', 'ADJUSTMENT', 'PURCHASE', etc
  notes         String?
  createdAt     DateTime          @default(now())
  createdBy     String?           // User ID (opsional untuk future)
  
  // Relations
  product       Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  transaction   Transaction?      @relation(fields: [referenceId], references: [id], onDelete: SetNull)

  @@map("stock_movements")
}

// ========================================
// ANALYTICS & REPORTING (Optional for future)
// ========================================

model DailySales {
  id            String   @id @default(cuid())
  date          DateTime @unique @db.Date
  totalSales    Decimal  @db.Decimal(12, 2)
  totalOrders   Int
  totalItems    Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("daily_sales")
} 